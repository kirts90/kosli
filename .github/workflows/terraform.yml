name: 'Terraform CI/CD'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    # Initialize Terraform with S3 backend
    - name: Terraform Init
      run: terraform init
      
    # Validate Terraform configuration
    - name: Terraform Validate
      run: terraform validate

    # Check formatting of Terraform code
    - name: Terraform Format
      run: terraform fmt -check

    # Run Terraform Plan on pull requests
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: |
        terraform plan -var-file=dev.tfvars -no-color
      continue-on-error: true

    # Add plan output to pull request
    - name: Update PR with Plan Output
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Plan üìù\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Apply Terraform changes for main branch or manually triggered workflow
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          ENVIRONMENT="${{ github.event.inputs.environment }}"
        else
          ENVIRONMENT="dev"  # Default to dev for main branch pushes
        fi
        
        echo "Deploying to ${ENVIRONMENT} environment"
        terraform apply -var-file=${ENVIRONMENT}.tfvars -auto-approve
        
    # Invalidate CloudFront cache if HTML files were changed
    - name: Invalidate CloudFront Cache
      if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
      run: |
        DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
        if [ -n "$DISTRIBUTION_ID" ]; then
          echo "Invalidating CloudFront cache for distribution $DISTRIBUTION_ID"
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
        fi